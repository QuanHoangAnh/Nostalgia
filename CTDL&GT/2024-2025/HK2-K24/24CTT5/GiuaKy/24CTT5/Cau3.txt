18, 27, 36, 10, 79, 83, 28, 17, 52, 68
0   1   2   3   4   5   6   7   8   9

a) Heapify để trở thành max heap

Nguyên tắc của max heap
a[i] >= a[i * 2 + 1]
a[i] >= a[i * 2 + 2]

Để heapify thì đi từ giữa lên đầu, rồi thực hiện sift-down tại từng vị trí
for (int i = n / 2 - 1; i >= 0; i--) {
    siftDown(pq, i);
}

- i = n / 2 - 1 = 10 / 2 - 1 = 4: a[4] = 79
a[i * 2 + 1] = a[4 * 2 + 1] = a[9] = 68
a[i * 2 + 2] = a[4 * 2 + 2] = a[10] -> Không tồn tại
-> a[4] đã lớn hơn cả 2 con -> Không cần làm gì

- i = 3: a[3] = 10
a[i * 2 + 1] = a[3 * 2 + 1] = a[7] = 17
a[i * 2 + 2] = a[3 * 2 + 2] = a[8] = 52
-> Swap a[3] và a[8]
18, 27, 36, 52, 79, 83, 28, 17, 10, 68
- a[8] không có con -> Dừng ở đây

- i = 2: a[2] = 36
a[i * 2 + 1] = a[2 * 2 + 1] = a[5] = 83
a[i * 2 + 2] = a[2 * 2 + 2] = a[6] = 28
-> Swap a[2] và a[5]
18, 27, 83, 52, 79, 36, 28, 17, 10, 68
- a[5] không có con -> Dừng ở đây

- i = 1: a[1] = 27
a[i * 2 + 1] = a[1 * 2 + 1] = a[3] = 52
a[i * 2 + 2] = a[1 * 2 + 2] = a[4] = 79
-> Swap a[1] và a[4]
18, 79, 83, 52, 27, 36, 28, 17, 10, 68
- a[4] = 27 vẫn có con
a[i * 2 + 1] = a[4 * 2 + 1] = a[9] = 68
a[i * 2 + 2] = a[4 * 2 + 2] = a[10] -> Không tồn tại
-> Swap a[4] và a[9]
18, 79, 83, 52, 68, 36, 28, 17, 10, 27
- a[9] không có con -> Dừng ở đây

- i = 0: a[0] = 18
a[i * 2 + 1] = a[0 * 2 + 1] = a[1] = 79
a[i * 2 + 2] = a[0 * 2 + 2] = a[2] = 83
-> Swap a[0] và a[2]
83, 79, 18, 52, 68, 36, 28, 17, 10, 27
- a[2] = 18 vẫn có con
a[i * 2 + 1] = a[2 * 2 + 1] = a[5] = 36
a[i * 2 + 2] = a[2 * 2 + 2] = a[6] = 28
-> Swap a[2] và a[5]
83, 79, 36, 52, 68, 18, 28, 17, 10, 27
- a[5] không có con -> Dừng ở đây

Max heap sau cùng: 83, 79, 36, 52, 68, 18, 28, 17, 10, 27

b)
Pre-order (NLR): 83 79 52 17 10 68 27 36 18 28
In-order (LNR): 17 52 10 79 27 68 83 18 36 28
Post-order (LRN): 17 10 52 27 68 79 18 28 36 83 